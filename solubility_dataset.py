# -*- coding: utf-8 -*-
"""Solubility dataset 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NCMHhu00GeU93woWaN8S-TuZ2Ny0MdAc
"""

#!pip3 install --pre deepchem

#!pip3 install streamlit

import streamlit as st

st.write("""
# Simple Blob Detection App
Upload your image and see where the Blob is!
""")

st.sidebar.header('User Input Parameters')

"""We can now import the `deepchem` package to play with."""

import deepchem as dc
dc.__version__

import numpy as np
from deepchem.feat import MolGraphConvFeaturizer
from deepchem.feat.graph_data import GraphData
from deepchem.data import NumpyDataset

# tasks, datasets, transformers = dc.molnet.load_lipo(featurizer='GraphConv', splitter='random')
# tasks, datasets, transformers = dc.molnet.load_lipo(featurizer='ECFP')

featurizer = MolGraphConvFeaturizer(use_edges=True)

# tasks, datasets, transformers = dc.molnet.load_delaney(featurizer=featurizer)
tasks, datasets, transformers = dc.molnet.load_delaney(featurizer="GraphConv") #, splitter="scaffold")
# tasks, datasets, transformers = dc.molnet.load_lipo(featurizer="ECFP")

(train, valid, test) = datasets

train

train.X[0]

train.y

import numpy as np
np.ptp(train.y)
print(max(train.y))
print(min(train.y))

model = dc.models.GraphConvModel(len(tasks), batch_size=10, mode='regression', droupout=0.5)
# model = dc.models.MultitaskClassifier(n_tasks=1, n_features=3360, layer_sizes=[1000])

model.fit(train, nb_epoch=30)
metric = dc.metrics.Metric(dc.metrics.pearson_r2_score, np.mean)
# metric = dc.metrics.Metric(dc.metrics.roc_auc_score)
print('training set score:', model.evaluate(train, [metric], transformers))
print('test set score:', model.evaluate(test, [metric], transformers))



test.y

model.predict(test)

train.X.shape

train.X[0]

"""Note that unlike the earlier invocation we have numpy arrays produced by `dc.feat.CircularFingerprint` instead of `ConvMol` objects produced by `dc.feat.ConvMolFeaturizer`.

Give it a try for yourself. Try invoking MoleculeNet to load some other datasets and experiment with dfiferent featurizer/split options and see what happens!

# Congratulations! Time to join the Community!

Congratulations on completing this tutorial notebook! If you enjoyed working through the tutorial, and want to continue working with DeepChem, we encourage you to finish the rest of the tutorials in this series. You can also help the DeepChem community in the following ways:

## Star DeepChem on [GitHub](https://github.com/deepchem/deepchem)
This helps build awareness of the DeepChem project and the tools for open source drug discovery that we're trying to build.

## Join the DeepChem Gitter
The DeepChem [Gitter](https://gitter.im/deepchem/Lobby) hosts a number of scientists, developers, and enthusiasts interested in deep learning for the life sciences. Join the conversation!
"""
